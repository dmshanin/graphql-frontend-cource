{"version":3,"sources":["app/bus/pet/hooks/useQueryAvailablePets/index.js","app/bus/pet/counter.js","app/bus/pet/hooks/useQueryAllPets/index.js","app/bus/pet/list.js","app/bus/pet/hooks/useQueryAllAvailablePets/index.js","app/bus/pet/specialList.js","app/bus/pet/index.js","app/init/client.js","serviceWorker.js","index.js","app/index.js"],"names":["queryAvailablePets","Counter","useQuery","loading","error","data","message","availablePets","queryAllPets","List","pets","allPets","useQueryAllPets","petsJSX","map","id","name","weight","key","queryAllAvailablePets","SpecialList","useLazyQuery","getAllAvailablePets","allAvailablePets","useQueryAllAvailablePets","loaderJSX","errorJSX","onClick","Pet","client","ApolloClient","uri","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAKMA,EAAkB,2aCCXC,EAAU,WAAO,IAAD,EDEpBC,YAASF,GCDRG,EADmB,EACnBA,QAASC,EADU,EACVA,MAAOC,EADG,EACHA,KAExB,OAAIF,EACK,yCAGLC,EAEA,iDACsBA,EAAME,SAM9B,4CAEGD,EAAKE,gBCnBNC,EAAY,otBCCLC,EAAO,WAAO,IAAD,EDCK,WAAO,IAAD,EACFP,YAASM,GAAlCL,EAD2B,EAC3BA,QAASC,EADkB,EAClBA,MAAOC,EADW,EACXA,KAIxB,MAAO,CAAEF,UAASC,QAAOM,KAFZL,EAAOA,EAAKM,QAAU,MCHFC,GAAzBT,EADgB,EAChBA,QAASC,EADO,EACPA,MAAOM,EADA,EACAA,KAExB,GAAIP,EACF,OAAO,yCAGT,GAAIC,EACF,OACE,iDACsBA,EAAME,SAKhC,IAAMO,EAAUH,EAAKI,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,OAAZ,OACvB,uBAAGC,IAAKH,GACN,uCAAaC,GACb,yCAAeC,OAInB,OACE,oCACE,oCACCJ,I,QC1BDM,EAAqB,wvBCCdC,EAAc,WAAO,IAAD,EDCO,WAAO,IAAD,EACYC,YAAaF,GADzB,mBACrCG,EADqC,YACdnB,EADc,EACdA,QAASC,EADK,EACLA,MAAOC,EADF,EACEA,KAE9C,MAAO,CAAEiB,sBAAqBnB,UAASC,QAAOM,KAAML,GAAQA,EAAKkB,kBCHXC,GAA9CF,EADuB,EACvBA,oBAAqBnB,EADE,EACFA,QAASC,EADP,EACOA,MAAOM,EADd,EACcA,KAEvCe,EAAYtB,GAChB,yCAGIuB,EAAWtB,GACf,iDACsBA,EAAME,SAIxBO,EAAUH,GAAQA,EAAKI,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,OAAZ,OAC/B,uBAAGC,IAAKH,GACN,uCAAaC,GACb,yCAAeC,OAInB,OACE,oCACE,4BAAQU,QAASL,GAAjB,YACCG,EACAC,EACAb,ICvBMe,EAAM,WACjB,OACE,oCACE,mCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCROC,EAAS,I,MAAIC,GAAa,CACrCC,IAHU,gDCQQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCKG,WACjB,OACE,kBAAC,IAAD,CAAgBT,OAAQA,GACtB,kBAAC,EAAD,SDRU,MAASU,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f15d7daa.chunk.js","sourcesContent":["// Core\nimport { useQuery } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\n\n// Queries\nconst queryAvailablePets = loader('./gql/queryAvailablePets.graphql');\n\nexport const useQueryAvailablePets = () => {\n  return useQuery(queryAvailablePets);\n};\n","// Core\nimport React from 'react';\n\n// Hooks\nimport { useQueryAvailablePets } from './hooks/useQueryAvailablePets';\n\nexport const Counter = () => {\n  const { loading, error, data } = useQueryAvailablePets();\n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n  if (error) {\n    return (\n      <p>\n        We have a problem: {error.message}\n      </p>\n    )\n  }\n\n  return (\n    <p>\n      AvailablePets:\n      {data.availablePets}\n    </p>\n  )\n};\n","// Core\nimport { useQuery } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\n\n// Queries\nconst queryAllPets = loader('./gql/queryAllPets.graphql');\n\nexport const useQueryAllPets = () => {\n  const { loading, error, data } = useQuery(queryAllPets);\n\n  const pets = data ? data.allPets : null;\n\n  return { loading, error, pets };\n}\n","// Core\nimport React from 'react';\n\n// Hooks\nimport { useQueryAllPets } from './hooks/useQueryAllPets';\n\nexport const List = () => {\n  const { loading, error, pets } = useQueryAllPets();\n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n  if (error) {\n    return (\n      <p>\n        We have a problem: {error.message}\n      </p>\n    )\n  }\n\n  const petsJSX = pets.map(({id, name, weight}) => (\n    <p key={id}>\n      <span>Name: {name}</span>\n      <span>Weight: {weight}</span>\n    </p>\n  ));\n\n  return (\n    <>\n      <h1>Pets</h1>\n      {petsJSX}\n    </>\n  )\n};\n","// Core\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\n\n// Queries\nconst queryAllAvailablePets = loader('./gql/queryAllAvailablePets.graphql');\n\nexport const useQueryAllAvailablePets = () => {\n  const [getAllAvailablePets, { loading, error, data }] = useLazyQuery(queryAllAvailablePets);\n\n  return { getAllAvailablePets, loading, error, pets: data && data.allAvailablePets }\n};\n","// Core\nimport React from 'react';\n\n// Hooks\nimport { useQueryAllAvailablePets } from './hooks/useQueryAllAvailablePets';\n\nexport const SpecialList = () => {\n  const { getAllAvailablePets, loading, error, pets } = useQueryAllAvailablePets();\n\n  const loaderJSX = loading && (\n    <p>Loading...</p>\n  );\n\n  const errorJSX = error && (\n    <p>\n      We have a problem: {error.message}\n    </p>\n  );\n\n  const petsJSX = pets && pets.map(({id, name, weight}) => (\n    <p key={id}>\n      <span>Name: {name}</span>\n      <span>Weight: {weight}</span>\n    </p>\n  ));\n\n  return (\n    <>\n      <button onClick={getAllAvailablePets}>Download</button>\n      {loaderJSX}\n      {errorJSX}\n      {petsJSX}\n    </>\n  )\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { Counter } from './counter';\nimport { List } from './list';\nimport { SpecialList } from './specialList';\n\nexport const Pet = () => {\n  return (\n    <>\n      <h1>Pet</h1>\n      <Counter />\n      <List />\n      <SpecialList />\n    </>\n  )\n};\n","// Core\nimport ApolloClient from 'apollo-boost';\n\n// GraphQL Server\nconst uri = 'https://funded-pet-library.moonhighway.com/';\n\nexport const client = new ApolloClient({\n  uri\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Core\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// Components\nimport { Pet } from './bus/pet';\n\n// Other\nimport { client } from './init/client';\n\nexport const App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Pet />\n    </ApolloProvider>\n  )\n};\n"],"sourceRoot":""}