{"version":3,"sources":["app/bus/customer/hooks/useQueryAllCustomers/index.js","app/bus/customer/list.js","app/bus/customer/index.js","app/init/client.js","serviceWorker.js","index.js","app/index.js"],"names":["queryAllCustomers","List","useQuery","loading","error","data","customers","allCustomers","useQueryAllCustomers","message","customersJSX","map","index","username","name","dateCreated","key","className","scope","Customer","client","ApolloClient","uri","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAKMA,EAAiB,8vBCCVC,EAAO,WAAO,IAAD,EDCU,WAAO,IAAD,EACPC,YAASF,GAAlCG,EADgC,EAChCA,QAASC,EADuB,EACvBA,MAAOC,EADgB,EAChBA,KAIxB,MAAO,CAAEF,UAASC,QAAOE,UAFPD,EAAOA,EAAKE,aAAe,MCHPC,GAA9BL,EADgB,EAChBA,QAASC,EADO,EACPA,MAAOE,EADA,EACAA,UAExB,GAAIH,EACF,OAAO,2GAGT,GAAIC,EACF,OACE,oEACaA,EAAMK,SAKvB,IAAMC,EAAeJ,EAAUK,KAAI,WAAkCC,GAAlC,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,YAAnB,OACjC,wBAAIC,IAAKJ,GACP,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,OAIT,OACE,iCACE,yBAAKE,UAAU,MAAf,kBAEA,2BAAOA,UAAU,mCACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,8CACA,wBAAIA,MAAM,OAAV,sBACA,wBAAIA,MAAM,OAAV,8BAGJ,+BACGR,MCpCES,EAAW,WACtB,OACE,yBAAKF,UAAU,iBACb,yBAAKA,UAAU,WAAf,YACA,kBAAC,EAAD,QCJOG,EAAS,I,MAAIC,GAAa,CACrCC,IAHU,gDCQQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,mBCGG,WACjB,OACE,kBAAC,IAAD,CAAgBT,OAAQA,GAEtB,kBAAC,EAAD,SDPU,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cbf4a6d9.chunk.js","sourcesContent":["// Core\nimport { useQuery } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\n\n// Queries\nconst queryAllCustomers = loader('./gql/queryAllCustomers.graphql');\n\nexport const useQueryAllCustomers = () => {\n  const { loading, error, data } = useQuery(queryAllCustomers);\n\n  const customers = data ? data.allCustomers : null;\n\n  return { loading, error, customers };\n};\n","// Core\nimport React from 'react';\n\n// Hooks\nimport { useQueryAllCustomers } from './hooks/useQueryAllCustomers';\n\nexport const List = () => {\n  const { loading, error, customers } = useQueryAllCustomers();\n\n  if (loading) {\n    return <p>Идет загрузка...</p>;\n  }\n\n  if (error) {\n    return (\n      <p>\n          Ошибка: {error.message}\n      </p>\n    );\n  }\n\n  const customersJSX = customers.map(({ username, name, dateCreated }, index) => (\n    <tr key={index}>\n      <td>{username}</td>\n      <td>{name}</td>\n      <td>{dateCreated}</td>\n    </tr>\n  ));\n\n  return (\n    <section>\n      <div className='h3'>Customers List</div>\n\n      <table className='table table-striped table-hover'>\n        <thead>\n          <tr>\n            <th scope='col'>Никнейм</th>\n            <th scope='col'>Имя</th>\n            <th scope='col'>Дата</th>\n          </tr>\n        </thead>\n        <tbody>\n          {customersJSX}\n        </tbody>\n      </table>\n    </section>\n  );\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { List } from './list';\n\nexport const Customer = () => {\n  return (\n    <div className='container p-5'>\n      <div className='h1 mb-4'>Customer</div>\n      <List />\n    </div>\n  );\n};\n","// Core\nimport ApolloClient from 'apollo-boost';\n\n// GraphQL Server\nconst uri = 'https://funded-pet-library.moonhighway.com/';\n\nexport const client = new ApolloClient({\n  uri\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport * as serviceWorker from './serviceWorker';\n\n// Styles\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Core\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// Components\n// import { Pet } from './bus/pet';\nimport { Customer } from './bus/customer';\n\n// Other\nimport { client } from './init/client';\n\nexport const App = () => {\n  return (\n    <ApolloProvider client={client}>\n      {/*<Pet />*/}\n      <Customer />\n    </ApolloProvider>\n  )\n};\n"],"sourceRoot":""}